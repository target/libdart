# Basic config
language: cpp
dist: xenial
sudo: required
services:
  - docker
branches:
  only:
    - master
    - development

# Common external dependencies.
before_install:
  # Install GSL, rapidjson, sajson, and Google Benchmark
  # Brew is so slow, but it makes it easy
  - |
    if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ -z "$ARCH" ]; then
      BUILD_DIR=$(mktemp -d)
      pushd $BUILD_DIR
      curl -sL "https://github.com/microsoft/GSL/archive/v2.0.0.tar.gz" | tar xzf -
      cd GSL-2.0.0
      sudo cp -r include/gsl /usr/local/include/gsl
      cd ..
      curl -sL "https://github.com/Tencent/rapidjson/archive/v1.1.0.tar.gz" | tar xzf -
      cd rapidjson-1.1.0
      sudo cp -r include/rapidjson /usr/local/include/rapidjson
      cd ..
      curl -sL "https://github.com/google/benchmark/archive/v1.5.0.tar.gz" | tar xzf -
      cd benchmark-1.5.0
      mkdir build
      cd build
      cmake .. -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_TESTING=OFF -DBENCHMARK_ENABLE_GTEST_TESTS=OFF
      make -j 2
      sudo make install
      cd ../..
      curl -sL "https://github.com/Cfretz244/sajson/archive/stable.tar.gz" | tar xzf -
      cd sajson-stable
      sudo cp include/sajson.h /usr/local/include
      popd
      rm -rf $BUILD_DIR
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      brew update
      brew install cpp-gsl rapidjson google-benchmark
      BUILD_DIR=$(mktemp -d)
      pushd $BUILD_DIR
      curl -sL "https://github.com/Cfretz244/sajson/archive/stable.tar.gz" | tar xzf -
      cd sajson-stable
      sudo cp include/sajson.h /usr/local/include
      popd
      rm -rf $BUILD_DIR
      brew install python@2
      pip2 install cpp-coveralls
    fi

# Final environment configs.
install:
  - |
    if [ -n "${VERSION}" ]; then
      export CC="${CC}-${VERSION}"
      export CXX="${CXX}-${VERSION}"
    fi
  - ${CXX} --version

# Build matrix
matrix:
  include:
    - env: VERSION=5 ARCH=powerpc-linux
      os: linux
      compiler: gcc
      script:
        - docker build -f Dockerfile.build -t builder .
        - docker run --name="build_results" builder
        - docker cp build_results:/root/libdart/build/test/unit_tests .
        - docker build -f Dockerfile.harness -t test_harness .
        - sudo docker run --privileged test_harness
    - env: VERSION=3.8
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-3.8
            - g++-7
    - env: VERSION=3.9
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-3.9
            - g++-7
    - env: VERSION=4.0
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-4.0
            - g++-7
    - env: VERSION=5.0
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-5.0
            - g++-7
    - env: VERSION=6.0
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-6.0
            - g++-7
    - env: VERSION=7
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-7
            - g++-7
    - env: VERSION=5
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-5
    - env: VERSION=6
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-6
    - env: VERSION=7
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-7
    - env: VERSION=8
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-8
    - os: osx
      compiler: clang
      osx_image: xcode8.3
    - os: osx
      compiler: clang
      osx_image: xcode9.4
    - os: osx
      compiler: clang
      osx_image: xcode10.1
      env:
        GEN_COVERAGE: true

# Build and run.
script:
  - mkdir build
  - cd build
  - cmake .. -Dextended_test=ON -Dbenchmark=ON -Dbuild_abi=ON -Dgen_coverage=ON
  - make VERBOSE=1
  - ctest --output-on-failure
  - cd ..
  - mkdir build2
  - cd build2
  - cmake .. -Duse_sajson=ON -Dbenchmark=ON -Dbuild_abi=ON
  - make VERBOSE=1
  - ctest --output-on-failure
  - cd ..

after_success:
  - |
    if [ "${TRAVIS_OS_NAME}" = "osx" ] && [ "${GEN_COVERAGE}" = "true" ]; then
      coveralls -r . -b build/ -i include/ -i src/ -e include/extern/ --gcov-options '\-lp'
    fi
