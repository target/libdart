# Basic config
language: cpp
dist: xenial
sudo: required
services:
  - docker
branches:
  only:
    - master
    - development

# Common external dependencies.
before_install:
  # Install GSL, rapidjson, sajson, and Google Benchmark
  - |
    if [ -z "$ARCH" ]; then
      BUILD_DIR=$(mktemp -d)
      pushd $BUILD_DIR
      if [ "${USE_GSL_LITE}" = "true" ]; then
        curl -sL "https://github.com/gsl-lite/gsl-lite/archive/v0.37.0.tar.gz" | tar xzf -
        cd gsl-lite-0.37.0
        mkdir build
        cd build
        cmake .. -DGSL_LITE_OPT_INSTALL_COMPAT_HEADER=ON
        sudo make install
        cd ../..
      else
        curl -sL "https://github.com/microsoft/GSL/archive/v2.0.0.tar.gz" | tar xzf -
        cd GSL-2.0.0
        sudo cp -r include/gsl /usr/local/include/gsl
        cd ..
      fi
      curl -sL "https://github.com/Tencent/rapidjson/archive/v1.1.0.tar.gz" | tar xzf -
      cd rapidjson-1.1.0
      sudo cp -r include/rapidjson /usr/local/include/rapidjson
      cd ..
      curl -sL "https://github.com/google/benchmark/archive/v1.5.0.tar.gz" | tar xzf -
      cd benchmark-1.5.0
      mkdir build
      cd build
      cmake .. -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_TESTING=OFF -DBENCHMARK_ENABLE_GTEST_TESTS=OFF
      make -j 2
      sudo make install
      cd ../..
      curl -sL "https://github.com/Cfretz244/sajson/archive/stable.tar.gz" | tar xzf -
      cd sajson-stable
      sudo cp include/sajson.h /usr/local/include
      popd
      rm -rf $BUILD_DIR
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        pip install --user cpp-coveralls
      fi
    fi

# Final environment configs.
install:
  - |
    if [ -n "${VERSION}" ]; then
      export CC="${CC}-${VERSION}"
      export CXX="${CXX}-${VERSION}"
    fi
  - ${CXX} --version

# Build matrix
matrix:
  include:
    - env:
        VERSION: 7
        FUZZ: true
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-7
            - g++-7
    - env:
        VERSION: 5
        USE_GSL_LITE: true
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-5
    - env:
        VERSION: 6
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-6
    - env:
        VERSION: 7
        GEN_COVERAGE: true
        USE_GSL_LITE: true
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-7
    - env:
        VERSION: 8
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-8
    - env:
        VERSION: 9
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - g++-9
    - env: VERSION=5 ARCH=powerpc-linux
      os: linux
      compiler: gcc
      script:
        - docker build -f Dockerfile.build -t builder .
        - docker run --name="build_results" builder
        - docker cp build_results:/root/libdart/build/test/unit_tests .
        - docker build -f Dockerfile.harness -t test_harness .
        - sudo docker run --privileged test_harness
    - env:
        VERSION: 3.8
        USE_GSL_LITE: true
        IS_SLOW_AS_MOLASSES: true
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-3.8
            - g++-7
    - env:
        VERSION: 3.9
        IS_SLOW_AS_MOLASSES: true
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-3.9
            - g++-7
    - env:
        VERSION: 4.0
        USE_GSL_LITE: true
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-4.0
            - g++-7
    - env:
        VERSION: 5.0
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-5.0
            - g++-7
    - env:
        VERSION: 6.0
        USE_GSL_LITE: true
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-6.0
            - g++-7
    - env:
        VERSION: 7
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-7
            - g++-7
    - env:
        VERSION: 8
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
            - ubuntu-toolchain-r-test
          packages:
            - rapidjson-dev
            - clang-8
            - g++-7
    - os: osx
      compiler: clang
      osx_image: xcode8.3
      env:
        USE_GSL_LITE: true
        IS_SLOW_AS_MOLASSES: true
    - os: osx
      compiler: clang
      osx_image: xcode9.4
      env:
        IS_SLOW_AS_MOLASSES: true
    - os: osx
      compiler: clang
      osx_image: xcode10.1
      env:
        USE_GSL_LITE: true
        IS_SLOW_AS_MOLASSES: true
    - os: osx
      compiler: clang
      osx_image: xcode11.3
      env:
        IS_SLOW_AS_MOLASSES: true

# Build and run.
script:
  - |
    if [ "${FUZZ}" = "true" ]; then
      cd test
      clang++ -std=c++14 -g -O3 -fsanitize=fuzzer,address -o fuzz fuzz_tests.cc
      mkdir discoveries
      timeout --preserve-status 600 ./fuzz fuzzer_input discoveries
    else
      mkdir build
      cd build
      while true; do sleep 60; echo 'still here!'; done &
      KEEPALIVE_PID=$!
      if [ "${IS_SLOW_AS_MOLASSES}" = "true" ]; then
        cmake .. -Dbenchmark=ON -Duse_sajson=ON -Dbuild_abi=ON -Duse_asan=ON
      else
        cmake .. -Dbenchmark=ON -Duse_sajson=ON -Dextended_test=ON -Dbuild_abi=ON -Dgen_coverage=ON -Duse_asan=ON
      fi
      make VERBOSE=1
      kill -9 $KEEPALIVE_PID
      ctest --output-on-failure
    fi

after_success:
  - |
    cd ..
    if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ "${GEN_COVERAGE}" = "true" ]; then
      coveralls --gcov gcov-7 -r . -b build/ -i include/ -i src/ -E '.*(catch|variant).*' --gcov-options '\-lp'
    fi
