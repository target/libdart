# Define a catch library so we only have to build it once.
add_library(catch OBJECT catch_driver.cc)

# Setup targets for our unit tests.
if (build_abi)
  add_executable(abi_tests abi_unit_tests.cc $<TARGET_OBJECTS:catch>)
  target_link_libraries(abi_tests dart_abi)
  target_compile_options(abi_tests PUBLIC "-g")
endif ()
add_executable(unit_tests type_unit_tests.cc obj_unit_tests.cc arr_unit_tests.cc str_unit_tests.cc int_unit_tests.cc dcm_unit_tests.cc bool_unit_tests.cc null_unit_tests.cc iteration_unit_tests.cc ptr_unit_tests.cc misc_unit_tests.cc optional_unit_tests.cc string_view_unit_tests.cc $<TARGET_OBJECTS:catch>)

if (can_build_yaml)
  target_link_libraries(unit_tests ${libyaml})
  target_link_libraries(abi_tests ${libyaml})
endif ()
if (extended_test)
  target_compile_options(unit_tests PUBLIC "-DDART_EXTENDED_TESTS")
endif ()
if (32bit)
  target_link_libraries(unit_tests atomic)
  target_link_libraries(abi_tests atomic)
endif ()
if (static_test)
  target_link_libraries(unit_tests "-static-libstdc++")
  if (build_abi)
    target_link_libraries(abi_tests "-static-libdstdc++")
  endif ()
endif ()
target_compile_options(unit_tests PUBLIC "-g")

# Setup targest for JSON tests.
if (librj)
  add_executable(json_test json_test.cc $<TARGET_OBJECTS:catch>)
  target_compile_options(json_test PUBLIC "-g")
  if (extended_test)
    target_compile_options(json_test PUBLIC "-DDART_EXTENDED_TESTS")
  endif ()
endif ()

# Same for yaml.
if (can_build_yaml)
  add_executable(yaml_test yaml_test.cc $<TARGET_OBJECTS:catch>)
  target_link_libraries(yaml_test ${libyaml})
  target_compile_options(yaml_test PUBLIC "-g")
  if (extended_test)
    target_compile_options(yaml_test PUBLIC "-DDART_EXTENDED_TESTS")
  endif ()
endif ()

# Create a cmake test to call through to our test binary.
add_test(NAME dart_unit_tests COMMAND unit_tests)
if (librj)
  add_test(NAME dart_json_tests COMMAND json_test)
endif ()
if (can_build_yaml)
  add_test(NAME dart_yaml_tests COMMAND yaml_test)
endif ()
if (build_abi)
  add_test(NAME dart_abi_tests COMMAND abi_tests)
endif ()
file(COPY ${CMAKE_CURRENT_SOURCE_DIRECTORY}test.json DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIRECTORY}test.yml DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
